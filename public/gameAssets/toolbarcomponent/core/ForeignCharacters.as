import mx.utils.Delegate;import mx.controls.TextInput;import mx.transitions.Tween;import mx.transitions.easing.*;import dialogcomponent.core.Dialog;import toolbarcomponent.core.*;//class toolbarcomponent.core.ForeignCharacters {	private var requestedLanguage:String;	private var targetMC:MovieClip;	//	private var initX:Number;	private var initY:Number;	private var initWidth:Number;	private var background:MovieClip;	private var holderClip:MovieClip;	private var buttonHolderClip:MovieClip;	private var maskClip:MovieClip;	private var scrollLeft:Scroller;	private var scrollRight:Scroller;	//	private var languageSets:Array;	private var totalLangNum:Number;	private var xml:XML;	private var isVisible:Boolean = false;	private var mc:MovieClip;	private var callBack:Function;	private var linkage:String;	//used for button click menu support	private var menuCounter:Number=0;	public function ForeignCharacters(lang:String, targetMC:MovieClip, x:Number, y:Number, w:Number, e:String, f:Function) {		requestedLanguage = lang;		this.targetMC = targetMC;		//		initX = x;		initY = y;		initWidth = w;		linkage = e;		callBack = f;		if(linkage != null) {			var menuButton:MovieClip = targetMC.attachMovie(linkage, "menuButton", targetMC.getNextHighestDepth(), {_x:x, _y:y});			menuButton.onRelease = Delegate.create(this, menuFunc);			Dialog.addListener(menuButton);		} else {			targetMC.onMouseMove = Delegate.create(this, trackMouse);		}				//		holderClip = targetMC.createEmptyMovieClip("characterHolder", 9997);		holderClip._x = Stage.width + 40;		holderClip._y = initY;		buttonHolderClip = holderClip.createEmptyMovieClip("buttonHolderClip", holderClip.getNextHighestDepth());		buttonHolderClip._x = 16;		maskClip = holderClip.attachMovie("mask", "mask", holderClip.getNextHighestDepth());		maskClip._x = 16;		maskClip._width = initWidth;		buttonHolderClip.setMask(maskClip);		//		background = holderClip.attachMovie("foreignbackground", "background", holderClip.getNextHighestDepth());		background._width = initWidth + 32;		background.swapDepths(buttonHolderClip);		background._alpha = 75;		//		languageSets = new Array();		//		// Whenever any text field is selected, the global variable activeText will be set to that text field		TextField.prototype.onSetFocus = function() {			_global.activeText = this;		};		TextInput.prototype.onSetFocus = function() {			_global.activeText = this;		};		//		getXML("../gameAssets/toolbarcomponent/characters.xml");	}	//	private function menuFunc():Void{		if(menuCounter == 0){			//reveals menu			menuCounter++;			new mx.transitions.Tween(holderClip, "_y", Elastic.easeOut, initY, initY, 2, true);			new mx.transitions.Tween(holderClip, "_x", Elastic.easeOut, Stage.width, initX - background._width, 20, false);		}		else{			menuCounter = 0;			//sends menu back to being hidden			new mx.transitions.Tween(holderClip, "_y", Elastic.easeOut, initY, initY, 2, true);			new mx.transitions.Tween(holderClip, "_x", Elastic.easeOut, initX - background._width, Stage.width+40, 20, false);		}	}	private function makeScroller():Void {		scrollLeft = new Scroller(this, "left", buttonHolderClip, holderClip, maskClip);		scrollRight = new Scroller(this, "right", buttonHolderClip, holderClip, maskClip);	}	private function trackMouse():Void {		holderClip._x = initX;		if (_root._ymouse > 370) {			if (!isVisible) {				isVisible = true;				new mx.transitions.Tween(holderClip, "_y", Elastic.easeOut, Stage.height, 370, 1, true);			}		} else {			if (isVisible) {				isVisible = false;				new mx.transitions.Tween(holderClip, "_y", Elastic.easeOut, 370, 420, 1, true);			}		}	}		private function getXML(xml_file):Void {		xml = new XML();		xml.ignoreWhite = true;		xml.onLoad = Delegate.create(this, createLanguagesArray);		xml.load(xml_file);	}	//	private function createLanguagesArray(success):Void {		totalLangNum = xml.firstChild.childNodes.length;		for (var i:Number = 0; i<totalLangNum; i++) {			var language:String = xml.firstChild.childNodes[i].attributes.language;			var set:CharacterSet = new CharacterSet(language);			var charactersNode:Array = xml.firstChild.childNodes[i].childNodes;			for (var j:Number = 0; j<charactersNode.length; j++) {				set.addCharacter(charactersNode[j].firstChild);			}			languageSets.push(set);		}		displayCharacterSet(requestedLanguage);	}	//	private function displayCharacterSet(lang:String):Void {		var charSet:CharacterSet = getCharacterSet(lang);		var chars:Array = charSet.getCharacters();		for (var i:Number = 0; i<chars.length; i++) {			var depth:Number = buttonHolderClip.getNextHighestDepth();			var clip:MovieClip = buttonHolderClip.attachMovie("letter_btn", "letter_"+i, depth);			clip._x = 0+(i*(clip._width+5));			clip._y = 0;			var letter:ForeignLetter = new ForeignLetter(this, clip, chars[i], callBack);		}		if (buttonHolderClip._width>maskClip._width) {			makeScroller();		}	}	//	private function getCharacterSet(lang:String):CharacterSet {		for (var i:Number = 0; i<totalLangNum; i++) {			if (languageSets[i].getLanguage() == lang) {				return languageSets[i];			}		}		trace("Foreign Character :: Error -- Could not find requested language ["+lang+"].");		return null;	}}